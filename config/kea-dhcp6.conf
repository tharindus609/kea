// Knowledgebase https://kea.readthedocs.io
{
"Dhcp6": {
    // Add names of your network interfaces to listen on.
    "interfaces-config": {
        "interfaces": ["eth0"]
    },

    "control-socket": {
        "socket-type": "unix",
        "socket-name": "/run/kea/kea-dhcp6-ctrl.sock"
    },

    // Use Memfile lease database backend to store leases in a CSV file.
    // Depending on how Kea was compiled, it may also support SQL databases
    // (MySQL and/or PostgreSQL). Those database backends require more
    // parameters, like name, host and possibly user and password.
    // There are dedicated examples for each backend. See Section 8.2.2 "Lease
    // Storage" for details.
    "lease-database": {
        // Memfile is the simplest and easiest backend to use. It's an in-memory
        // C++ database that stores its state in CSV file.
        "type": "memfile",
        "lfc-interval": 3600
    },

    // Kea allows storing host reservations in a database. If your network is
    // small or you have few reservations, it's probably easier to keep them
    // in the configuration file. If your network is large, it's usually better
    // to use database for it. To enable it, uncomment the following:
    // "hosts-database": {
    //     "type": "mysql",
    //     "name": "kea",
    //     "user": "kea",
    //     "password": "kea",
    //     "host": "localhost",
    //     "port": 3306
    // },
    // See Section 8.2.3 "Hosts storage" for details.

    // Setup reclamation of the expired leases and leases affinity.
    // Expired leases will be reclaimed every 10 seconds. Every 25
    // seconds reclaimed leases, which have expired more than 3600
    // seconds ago, will be removed. The limits for leases reclamation
    // are 100 leases or 250 ms for a single cycle. A warning message
    // will be logged if there are still expired leases in the
    // database after 5 consecutive reclamation cycles.
    "expired-leases-processing": {
        "reclaim-timer-wait-time": 10,
        "flush-reclaimed-timer-wait-time": 25,
        "hold-reclaimed-time": 3600,
        "max-reclaim-leases": 100,
        "max-reclaim-time": 250,
        "unwarned-reclaim-cycles": 5
    },

    // These parameters govern global timers. Addresses will be assigned with
    // preferred and valid lifetimes being 3000 and 4000, respectively. Client
    // is told to start renewing after 1000 seconds. If the server does not
    // respond after 2000 seconds since the lease was granted, a client is
    // supposed to start REBIND procedure (emergency renewal that allows
    // switching to a different server).
    "renew-timer": 1000,
    "rebind-timer": 2000,
    "preferred-lifetime": 3000,
    "valid-lifetime": 4000,

    // These are global options. They are going to be sent when a client requests
    // them, unless overwritten with values in more specific scopes. The scope
    // hierarchy is:
    // - global
    // - subnet
    // - class
    // - host
    //
    // Not all of those options make sense. Please configure only those that
    // are actually useful in your network.
    //
    // For a complete list of options currently supported by Kea, see
    // Section 8.2.9 "Standard DHCPv6 Options". Kea also supports
    // vendor options (see Section 7.2.10) and allows users to define their
    // own custom options (see Section 7.2.9).
    "option-data": [
        {
            "name": "dns-servers",
            "data": "fd00:abcd:1234:1000::2, fd00:abcd:1234:1000::3"
        }
    ],

    "subnet6": [
        {
            // This defines the whole subnet. Kea will use this information to
            // determine where the clients are connected. This is the whole
            // subnet in your network. This is mandatory parameter for each
            // subnet.
            "subnet": "fd00:abcd:1234:1000::/64",

            // Pools define the actual part of your subnet that is governed
            // by Kea. Technically this is optional parameter, but it's
            // almost always needed for DHCP to do its job. If you omit it,
            // clients won't be able to get addresses, unless there are
            // host reservations defined for them.
            "pools": [ { "pool": "2001:db8:1::/80" } ],

            // Kea supports prefix delegation (PD). This mechanism delegates
            // whole prefixes, instead of single addresses. You need to specify
            // a prefix and then size of the delegated prefixes that it will
            // be split into. This example below tells Kea to use
            // 2001:db8:1::/56 prefix as pool and split it into /64 prefixes.
            // This will give you 256 (2^(64-56)) prefixes.
            "pd-pools": [
                {
                    "prefix": "2001:db8:8::",
                    "prefix-len": 56,
                    "delegated-len": 64

                    // Kea also supports excluded prefixes. This advanced option
                    // is explained in Section 9.2.9. Please make sure your
                    // excluded prefix matches the pool it is defined in.
                    // "excluded-prefix": "2001:db8:8:0:80::",
                    // "excluded-prefix-len": 72
                }
            ],
            "option-data": [
                // You can specify additional options here that are subnet
                // specific. Also, you can override global options here.
                {
                    "name": "dns-servers",
                    "data": "2001:db8:2::dead:beef, 2001:db8:2::cafe:babe"
                }
            ],

            // Host reservations can be defined for each subnet.
            //
            // Note that reservations are subnet-specific in Kea. This is
            // different than ISC DHCP. Keep that in mind when migrating
            // your configurations.
            "reservations": [
                // This is a simple host reservation. The host with DUID matching
                // the specified value will get an address of 2001:db8:1::100.
                {
                    "duid": "01:02:03:04:05:0A:0B:0C:0D:0E",
                    "ip-addresses": [ "2001:db8:1::100" ]
                },

                // This is similar to the previous one, but this time the
                // reservation is done based on hardware/MAC address. The server
                // will do its best to extract the hardware/MAC address from
                // received packets (see 'mac-sources' directive for
                // details). This particular reservation also specifies two
                // extra options to be available for this client. If there are
                // options with the same code specified in a global, subnet or
                // class scope, the values defined at host level take
                // precedence.
                {
                    "hw-address": "00:01:02:03:04:05",
                    "ip-addresses": [ "2001:db8:1::101" ],
                    "option-data": [
                        {
                            "name": "dns-servers",
                            "data": "3000:1::234"
                        },
                        {
                            "name": "nis-servers",
                            "data": "3000:1::234"
                        }],

                    // This client will be automatically added to certain
                    // classes.
                    "client-classes": [ "special_snowflake", "office" ]
                },

                // This is a bit more advanced reservation. The client with the
                // specified DUID will get a reserved address, a reserved prefix
                // and a hostname.  This reservation is for an address that it
                // not within the dynamic pool.  Finally, this reservation
                // features vendor specific options for CableLabs, which happen
                // to use enterprise-id 4491. Those particular values will be
                // returned only to the client that has a DUID matching this
                // reservation.
                {
                    "duid": "01:02:03:04:05:06:07:08:09:0A",
                    "ip-addresses": [ "2001:db8:1:0:cafe::1" ],
                    "prefixes": [ "2001:db8:2:abcd::/64" ],
                    "hostname": "foo.example.com",
                    "option-data": [
                        {
                            "name": "vendor-opts",
                            "data": "4491"
                        },
                        {
                            "name": "tftp-servers",
                            "space": "vendor-4491",
                            "data": "3000:1::234"
                        }
                    ]
                },

                // This reservation is using flexible identifier. Instead of
                // relying on specific field, sysadmin can define an expression
                // similar to what is used for client classification,
                // e.g. substring(relay[0].option[17],0,6). Then, based on the
                // value of that expression for incoming packet, the reservation
                // is matched.  Expression can be specified either as hex or
                // plain text using single quotes.

                // Note: flexible identifier requires flex_id hook library to be
                // loaded to work.
                {
                    "flex-id": "'somevalue'",
                    "ip-addresses": [ "2001:db8:1:0:cafe::2" ]
                }
            ]
        }
    ],

    "loggers": [
    {
        "name": "kea-dhcp6",
        "output_options": [
            {
                "output": "stdout"
            }
        ],
        "severity": "INFO",
        "debuglevel": 0
    }
  ]
}
}
